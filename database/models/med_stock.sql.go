// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: med_stock.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const getStockByPharmacyAndMedicine = `-- name: GetStockByPharmacyAndMedicine :one
SELECT id, pharmacy_id, medicine_id, batch, created_at, stock FROM med_stock WHERE pharmacy_id = $1 AND medicine_id = $2 AND batch = $3
`

type GetStockByPharmacyAndMedicineParams struct {
	PharmacyID uuid.UUID `db:"pharmacy_id" json:"pharmacy_id"`
	MedicineID uuid.UUID `db:"medicine_id" json:"medicine_id"`
	Batch      string    `db:"batch" json:"batch"`
}

func (q *Queries) GetStockByPharmacyAndMedicine(ctx context.Context, arg GetStockByPharmacyAndMedicineParams) (MedStock, error) {
	row := q.db.QueryRow(ctx, getStockByPharmacyAndMedicine, arg.PharmacyID, arg.MedicineID, arg.Batch)
	var i MedStock
	err := row.Scan(
		&i.ID,
		&i.PharmacyID,
		&i.MedicineID,
		&i.Batch,
		&i.CreatedAt,
		&i.Stock,
	)
	return i, err
}

const getTotalStockForMedicine = `-- name: GetTotalStockForMedicine :one
SELECT SUM(stock) as total_stock FROM med_stock WHERE medicine_id = $1
`

func (q *Queries) GetTotalStockForMedicine(ctx context.Context, medicineID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalStockForMedicine, medicineID)
	var total_stock int64
	err := row.Scan(&total_stock)
	return total_stock, err
}
