// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: med_order_attributes.sql

package models

import (
	"context"
)

const getOrderAttributesByOrderID = `-- name: GetOrderAttributesByOrderID :one
SELECT id, order_id, user_id, app_info, balance, is_paid, bill_status, ce_channel_id, payment_mode, payment_details, customer_address, customer_location, discount_percentage, pharmacy_delivery_eta, customer_pharmacy_distance, is_agent_order, pg_plink_id, logistic_details, business_id, discount_amount, created_at, serving_pharmacy_id, billing_name, prescription_note, total_amount_paisa FROM med_order_attributes WHERE order_id = $1
`

func (q *Queries) GetOrderAttributesByOrderID(ctx context.Context, orderID string) (MedOrderAttribute, error) {
	row := q.db.QueryRow(ctx, getOrderAttributesByOrderID, orderID)
	var i MedOrderAttribute
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.UserID,
		&i.AppInfo,
		&i.Balance,
		&i.IsPaid,
		&i.BillStatus,
		&i.CeChannelID,
		&i.PaymentMode,
		&i.PaymentDetails,
		&i.CustomerAddress,
		&i.CustomerLocation,
		&i.DiscountPercentage,
		&i.PharmacyDeliveryEta,
		&i.CustomerPharmacyDistance,
		&i.IsAgentOrder,
		&i.PgPlinkID,
		&i.LogisticDetails,
		&i.BusinessID,
		&i.DiscountAmount,
		&i.CreatedAt,
		&i.ServingPharmacyID,
		&i.BillingName,
		&i.PrescriptionNote,
		&i.TotalAmountPaisa,
	)
	return i, err
}

const listOrdersByUserID = `-- name: ListOrdersByUserID :many
SELECT id, order_id, user_id, app_info, balance, is_paid, bill_status, ce_channel_id, payment_mode, payment_details, customer_address, customer_location, discount_percentage, pharmacy_delivery_eta, customer_pharmacy_distance, is_agent_order, pg_plink_id, logistic_details, business_id, discount_amount, created_at, serving_pharmacy_id, billing_name, prescription_note, total_amount_paisa FROM med_order_attributes WHERE user_id = $1
`

func (q *Queries) ListOrdersByUserID(ctx context.Context, userID string) ([]MedOrderAttribute, error) {
	rows, err := q.db.Query(ctx, listOrdersByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MedOrderAttribute{}
	for rows.Next() {
		var i MedOrderAttribute
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.UserID,
			&i.AppInfo,
			&i.Balance,
			&i.IsPaid,
			&i.BillStatus,
			&i.CeChannelID,
			&i.PaymentMode,
			&i.PaymentDetails,
			&i.CustomerAddress,
			&i.CustomerLocation,
			&i.DiscountPercentage,
			&i.PharmacyDeliveryEta,
			&i.CustomerPharmacyDistance,
			&i.IsAgentOrder,
			&i.PgPlinkID,
			&i.LogisticDetails,
			&i.BusinessID,
			&i.DiscountAmount,
			&i.CreatedAt,
			&i.ServingPharmacyID,
			&i.BillingName,
			&i.PrescriptionNote,
			&i.TotalAmountPaisa,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
