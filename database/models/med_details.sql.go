// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: med_details.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const getMedicineByID = `-- name: GetMedicineByID :one
SELECT id, name, salt, manufacturer, size_string, size, default_discount, prescription_needed, hsn, max_orderable_qty, medicine_type, description, is_discontinued, mrp_pack, slug_serial, discount_tier, sale_channel, is_old, external_slug FROM med_details WHERE id = $1
`

func (q *Queries) GetMedicineByID(ctx context.Context, id uuid.UUID) (MedDetail, error) {
	row := q.db.QueryRow(ctx, getMedicineByID, id)
	var i MedDetail
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Salt,
		&i.Manufacturer,
		&i.SizeString,
		&i.Size,
		&i.DefaultDiscount,
		&i.PrescriptionNeeded,
		&i.Hsn,
		&i.MaxOrderableQty,
		&i.MedicineType,
		&i.Description,
		&i.IsDiscontinued,
		&i.MrpPack,
		&i.SlugSerial,
		&i.DiscountTier,
		&i.SaleChannel,
		&i.IsOld,
		&i.ExternalSlug,
	)
	return i, err
}

const getMedicineBySlug = `-- name: GetMedicineBySlug :one
SELECT id, name, salt, manufacturer, size_string, size, default_discount, prescription_needed, hsn, max_orderable_qty, medicine_type, description, is_discontinued, mrp_pack, slug_serial, discount_tier, sale_channel, is_old, external_slug FROM med_details WHERE external_slug = $1
`

func (q *Queries) GetMedicineBySlug(ctx context.Context, externalSlug *string) (MedDetail, error) {
	row := q.db.QueryRow(ctx, getMedicineBySlug, externalSlug)
	var i MedDetail
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Salt,
		&i.Manufacturer,
		&i.SizeString,
		&i.Size,
		&i.DefaultDiscount,
		&i.PrescriptionNeeded,
		&i.Hsn,
		&i.MaxOrderableQty,
		&i.MedicineType,
		&i.Description,
		&i.IsDiscontinued,
		&i.MrpPack,
		&i.SlugSerial,
		&i.DiscountTier,
		&i.SaleChannel,
		&i.IsOld,
		&i.ExternalSlug,
	)
	return i, err
}

const searchMedicinesByPartialName = `-- name: SearchMedicinesByPartialName :many
SELECT med.id , med.name  FROM med_details as med WHERE name ILIKE '%' || $1 || '%' ORDER BY name
`

type SearchMedicinesByPartialNameRow struct {
	ID   uuid.UUID `db:"id" json:"id"`
	Name string    `db:"name" json:"name"`
}

func (q *Queries) SearchMedicinesByPartialName(ctx context.Context, dollar_1 *string) ([]SearchMedicinesByPartialNameRow, error) {
	rows, err := q.db.Query(ctx, searchMedicinesByPartialName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchMedicinesByPartialNameRow{}
	for rows.Next() {
		var i SearchMedicinesByPartialNameRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
