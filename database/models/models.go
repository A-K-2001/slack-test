// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package models

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Discounttier string

const (
	DiscounttierAYURVEDIC      Discounttier = "AYURVEDIC"
	DiscounttierCOSMETICS      Discounttier = "COSMETICS"
	DiscounttierEQUIPMENTS     Discounttier = "EQUIPMENTS"
	DiscounttierINJECTIONS     Discounttier = "INJECTIONS"
	DiscounttierMEDICINES      Discounttier = "MEDICINES"
	DiscounttierOTC            Discounttier = "OTC"
	DiscounttierSURGICALS      Discounttier = "SURGICALS"
	DiscounttierDELIVERYCHARGE Discounttier = "DELIVERY_CHARGE"
	DiscounttierLATENIGHTFEE   Discounttier = "LATE_NIGHT_FEE"
	DiscounttierSMALLCARTFEE   Discounttier = "SMALL_CART_FEE"
	DiscounttierAVDABOVE30     Discounttier = "AVD_ABOVE_30"
	DiscounttierOTCBELOW10     Discounttier = "OTC_BELOW_10"
	DiscounttierCOSABOVE40     Discounttier = "COS_ABOVE_40"
	DiscounttierEQPBELOW20     Discounttier = "EQP_BELOW_20"
	DiscounttierSGLBELOW20     Discounttier = "SGL_BELOW_20"
	DiscounttierCOSBELOW40     Discounttier = "COS_BELOW_40"
	DiscounttierEQPBELOW30     Discounttier = "EQP_BELOW_30"
	DiscounttierOTCBELOW20     Discounttier = "OTC_BELOW_20"
	DiscounttierOTCABOVE30     Discounttier = "OTC_ABOVE_30"
	DiscounttierSGLABOVE40     Discounttier = "SGL_ABOVE_40"
	DiscounttierCOSBELOW30     Discounttier = "COS_BELOW_30"
	DiscounttierOTCBELOW15     Discounttier = "OTC_BELOW_15"
	DiscounttierOTCBELOW30     Discounttier = "OTC_BELOW_30"
	DiscounttierINJBELOW25     Discounttier = "INJ_BELOW_25"
	DiscounttierSGLBELOW30     Discounttier = "SGL_BELOW_30"
	DiscounttierMEDBELOW30     Discounttier = "MED_BELOW_30"
	DiscounttierINJBELOW20     Discounttier = "INJ_BELOW_20"
	DiscounttierMEDBELOW50     Discounttier = "MED_BELOW_50"
	DiscounttierOTCBELOW25     Discounttier = "OTC_BELOW_25"
	DiscounttierMEDBELOW20     Discounttier = "MED_BELOW_20"
	DiscounttierMEDABOVE50     Discounttier = "MED_ABOVE_50"
	DiscounttierSGLBELOW40     Discounttier = "SGL_BELOW_40"
	DiscounttierMEDBELOW10     Discounttier = "MED_BELOW_10"
	DiscounttierMEDBELOW40     Discounttier = "MED_BELOW_40"
	DiscounttierINJABOVE30     Discounttier = "INJ_ABOVE_30"
	DiscounttierOTCBELOW5      Discounttier = "OTC_BELOW_5"
	DiscounttierEQPABOVE40     Discounttier = "EQP_ABOVE_40"
	DiscounttierEQPBELOW40     Discounttier = "EQP_BELOW_40"
	DiscounttierAVDBELOW30     Discounttier = "AVD_BELOW_30"
	DiscounttierINJBELOW30     Discounttier = "INJ_BELOW_30"
	DiscounttierAVDBELOW20     Discounttier = "AVD_BELOW_20"
	DiscounttierINJBELOW15     Discounttier = "INJ_BELOW_15"
	DiscounttierCOSBELOW20     Discounttier = "COS_BELOW_20"
)

func (e *Discounttier) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Discounttier(s)
	case string:
		*e = Discounttier(s)
	default:
		return fmt.Errorf("unsupported scan type for Discounttier: %T", src)
	}
	return nil
}

type NullDiscounttier struct {
	Discounttier Discounttier `json:"discounttier"`
	Valid        bool         `json:"valid"` // Valid is true if Discounttier is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDiscounttier) Scan(value interface{}) error {
	if value == nil {
		ns.Discounttier, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Discounttier.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDiscounttier) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Discounttier), nil
}

func (e Discounttier) Valid() bool {
	switch e {
	case DiscounttierAYURVEDIC,
		DiscounttierCOSMETICS,
		DiscounttierEQUIPMENTS,
		DiscounttierINJECTIONS,
		DiscounttierMEDICINES,
		DiscounttierOTC,
		DiscounttierSURGICALS,
		DiscounttierDELIVERYCHARGE,
		DiscounttierLATENIGHTFEE,
		DiscounttierSMALLCARTFEE,
		DiscounttierAVDABOVE30,
		DiscounttierOTCBELOW10,
		DiscounttierCOSABOVE40,
		DiscounttierEQPBELOW20,
		DiscounttierSGLBELOW20,
		DiscounttierCOSBELOW40,
		DiscounttierEQPBELOW30,
		DiscounttierOTCBELOW20,
		DiscounttierOTCABOVE30,
		DiscounttierSGLABOVE40,
		DiscounttierCOSBELOW30,
		DiscounttierOTCBELOW15,
		DiscounttierOTCBELOW30,
		DiscounttierINJBELOW25,
		DiscounttierSGLBELOW30,
		DiscounttierMEDBELOW30,
		DiscounttierINJBELOW20,
		DiscounttierMEDBELOW50,
		DiscounttierOTCBELOW25,
		DiscounttierMEDBELOW20,
		DiscounttierMEDABOVE50,
		DiscounttierSGLBELOW40,
		DiscounttierMEDBELOW10,
		DiscounttierMEDBELOW40,
		DiscounttierINJABOVE30,
		DiscounttierOTCBELOW5,
		DiscounttierEQPABOVE40,
		DiscounttierEQPBELOW40,
		DiscounttierAVDBELOW30,
		DiscounttierINJBELOW30,
		DiscounttierAVDBELOW20,
		DiscounttierINJBELOW15,
		DiscounttierCOSBELOW20:
		return true
	}
	return false
}

type Drugschedule string

const (
	DrugscheduleA  Drugschedule = "A"
	DrugscheduleB  Drugschedule = "B"
	DrugscheduleC  Drugschedule = "C"
	DrugscheduleC1 Drugschedule = "C1"
	DrugscheduleD  Drugschedule = "D"
	DrugscheduleE  Drugschedule = "E"
	DrugscheduleE1 Drugschedule = "E1"
	DrugscheduleF  Drugschedule = "F"
	DrugscheduleF1 Drugschedule = "F1"
	DrugscheduleF2 Drugschedule = "F2"
	DrugscheduleF3 Drugschedule = "F3"
	DrugscheduleFF Drugschedule = "FF"
	DrugscheduleG  Drugschedule = "G"
	DrugscheduleH  Drugschedule = "H"
	DrugscheduleJ  Drugschedule = "J"
	DrugscheduleK  Drugschedule = "K"
	DrugscheduleM  Drugschedule = "M"
	DrugscheduleM1 Drugschedule = "M1"
	DrugscheduleM2 Drugschedule = "M2"
	DrugscheduleM3 Drugschedule = "M3"
	DrugscheduleN  Drugschedule = "N"
	DrugscheduleO  Drugschedule = "O"
	DrugscheduleP  Drugschedule = "P"
	DrugscheduleQ  Drugschedule = "Q"
	DrugscheduleR  Drugschedule = "R"
	DrugscheduleR1 Drugschedule = "R1"
	DrugscheduleS  Drugschedule = "S"
	DrugscheduleT  Drugschedule = "T"
	DrugscheduleU  Drugschedule = "U"
	DrugscheduleU1 Drugschedule = "U1"
	DrugscheduleV  Drugschedule = "V"
	DrugscheduleW  Drugschedule = "W"
	DrugscheduleX  Drugschedule = "X"
	DrugscheduleY  Drugschedule = "Y"
	DrugscheduleH1 Drugschedule = "H1"
)

func (e *Drugschedule) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Drugschedule(s)
	case string:
		*e = Drugschedule(s)
	default:
		return fmt.Errorf("unsupported scan type for Drugschedule: %T", src)
	}
	return nil
}

type NullDrugschedule struct {
	Drugschedule Drugschedule `json:"drugschedule"`
	Valid        bool         `json:"valid"` // Valid is true if Drugschedule is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDrugschedule) Scan(value interface{}) error {
	if value == nil {
		ns.Drugschedule, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Drugschedule.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDrugschedule) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Drugschedule), nil
}

func (e Drugschedule) Valid() bool {
	switch e {
	case DrugscheduleA,
		DrugscheduleB,
		DrugscheduleC,
		DrugscheduleC1,
		DrugscheduleD,
		DrugscheduleE,
		DrugscheduleE1,
		DrugscheduleF,
		DrugscheduleF1,
		DrugscheduleF2,
		DrugscheduleF3,
		DrugscheduleFF,
		DrugscheduleG,
		DrugscheduleH,
		DrugscheduleJ,
		DrugscheduleK,
		DrugscheduleM,
		DrugscheduleM1,
		DrugscheduleM2,
		DrugscheduleM3,
		DrugscheduleN,
		DrugscheduleO,
		DrugscheduleP,
		DrugscheduleQ,
		DrugscheduleR,
		DrugscheduleR1,
		DrugscheduleS,
		DrugscheduleT,
		DrugscheduleU,
		DrugscheduleU1,
		DrugscheduleV,
		DrugscheduleW,
		DrugscheduleX,
		DrugscheduleY,
		DrugscheduleH1:
		return true
	}
	return false
}

type Hospitalroles string

const (
	HospitalrolesDOCTOR       Hospitalroles = "DOCTOR"
	HospitalrolesRECEPTIONIST Hospitalroles = "RECEPTIONIST"
	HospitalrolesTECHNICIAN   Hospitalroles = "TECHNICIAN"
)

func (e *Hospitalroles) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Hospitalroles(s)
	case string:
		*e = Hospitalroles(s)
	default:
		return fmt.Errorf("unsupported scan type for Hospitalroles: %T", src)
	}
	return nil
}

type NullHospitalroles struct {
	Hospitalroles Hospitalroles `json:"hospitalroles"`
	Valid         bool          `json:"valid"` // Valid is true if Hospitalroles is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullHospitalroles) Scan(value interface{}) error {
	if value == nil {
		ns.Hospitalroles, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Hospitalroles.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullHospitalroles) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Hospitalroles), nil
}

func (e Hospitalroles) Valid() bool {
	switch e {
	case HospitalrolesDOCTOR,
		HospitalrolesRECEPTIONIST,
		HospitalrolesTECHNICIAN:
		return true
	}
	return false
}

type LogisticEventType string

const (
	LogisticEventTypeRerouted     LogisticEventType = "rerouted"
	LogisticEventTypeDriverUpdate LogisticEventType = "driver_update"
	LogisticEventTypeArrived      LogisticEventType = "arrived"
	LogisticEventTypeVisited      LogisticEventType = "visited"
	LogisticEventTypeAssigned     LogisticEventType = "assigned"
	LogisticEventTypePicked       LogisticEventType = "picked"
	LogisticEventTypeDropped      LogisticEventType = "dropped"
)

func (e *LogisticEventType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LogisticEventType(s)
	case string:
		*e = LogisticEventType(s)
	default:
		return fmt.Errorf("unsupported scan type for LogisticEventType: %T", src)
	}
	return nil
}

type NullLogisticEventType struct {
	LogisticEventType LogisticEventType `json:"logistic_event_type"`
	Valid             bool              `json:"valid"` // Valid is true if LogisticEventType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLogisticEventType) Scan(value interface{}) error {
	if value == nil {
		ns.LogisticEventType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.LogisticEventType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLogisticEventType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.LogisticEventType), nil
}

func (e LogisticEventType) Valid() bool {
	switch e {
	case LogisticEventTypeRerouted,
		LogisticEventTypeDriverUpdate,
		LogisticEventTypeArrived,
		LogisticEventTypeVisited,
		LogisticEventTypeAssigned,
		LogisticEventTypePicked,
		LogisticEventTypeDropped:
		return true
	}
	return false
}

type Marketplace string

const (
	MarketplacePLAYSTORE Marketplace = "PLAY_STORE"
	MarketplaceAPPSTORE  Marketplace = "APP_STORE"
)

func (e *Marketplace) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Marketplace(s)
	case string:
		*e = Marketplace(s)
	default:
		return fmt.Errorf("unsupported scan type for Marketplace: %T", src)
	}
	return nil
}

type NullMarketplace struct {
	Marketplace Marketplace `json:"marketplace"`
	Valid       bool        `json:"valid"` // Valid is true if Marketplace is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMarketplace) Scan(value interface{}) error {
	if value == nil {
		ns.Marketplace, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Marketplace.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMarketplace) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Marketplace), nil
}

func (e Marketplace) Valid() bool {
	switch e {
	case MarketplacePLAYSTORE,
		MarketplaceAPPSTORE:
		return true
	}
	return false
}

type Meddemandledgerstatus string

const (
	MeddemandledgerstatusDRAFT     Meddemandledgerstatus = "DRAFT"
	MeddemandledgerstatusFULFILLED Meddemandledgerstatus = "FULFILLED"
	MeddemandledgerstatusIGNORED   Meddemandledgerstatus = "IGNORED"
)

func (e *Meddemandledgerstatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Meddemandledgerstatus(s)
	case string:
		*e = Meddemandledgerstatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Meddemandledgerstatus: %T", src)
	}
	return nil
}

type NullMeddemandledgerstatus struct {
	Meddemandledgerstatus Meddemandledgerstatus `json:"meddemandledgerstatus"`
	Valid                 bool                  `json:"valid"` // Valid is true if Meddemandledgerstatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMeddemandledgerstatus) Scan(value interface{}) error {
	if value == nil {
		ns.Meddemandledgerstatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Meddemandledgerstatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMeddemandledgerstatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Meddemandledgerstatus), nil
}

func (e Meddemandledgerstatus) Valid() bool {
	switch e {
	case MeddemandledgerstatusDRAFT,
		MeddemandledgerstatusFULFILLED,
		MeddemandledgerstatusIGNORED:
		return true
	}
	return false
}

type Meddemandledgertype string

const (
	MeddemandledgertypeAGENT Meddemandledgertype = "AGENT"
)

func (e *Meddemandledgertype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Meddemandledgertype(s)
	case string:
		*e = Meddemandledgertype(s)
	default:
		return fmt.Errorf("unsupported scan type for Meddemandledgertype: %T", src)
	}
	return nil
}

type NullMeddemandledgertype struct {
	Meddemandledgertype Meddemandledgertype `json:"meddemandledgertype"`
	Valid               bool                `json:"valid"` // Valid is true if Meddemandledgertype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMeddemandledgertype) Scan(value interface{}) error {
	if value == nil {
		ns.Meddemandledgertype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Meddemandledgertype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMeddemandledgertype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Meddemandledgertype), nil
}

func (e Meddemandledgertype) Valid() bool {
	switch e {
	case MeddemandledgertypeAGENT:
		return true
	}
	return false
}

type Medprocurementstatus string

const (
	MedprocurementstatusPURCHASED   Medprocurementstatus = "PURCHASED"
	MedprocurementstatusORDERED     Medprocurementstatus = "ORDERED"
	MedprocurementstatusNOTINDEMAND Medprocurementstatus = "NOT_IN_DEMAND"
	MedprocurementstatusNOTINMARKET Medprocurementstatus = "NOT_IN_MARKET"
)

func (e *Medprocurementstatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Medprocurementstatus(s)
	case string:
		*e = Medprocurementstatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Medprocurementstatus: %T", src)
	}
	return nil
}

type NullMedprocurementstatus struct {
	Medprocurementstatus Medprocurementstatus `json:"medprocurementstatus"`
	Valid                bool                 `json:"valid"` // Valid is true if Medprocurementstatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMedprocurementstatus) Scan(value interface{}) error {
	if value == nil {
		ns.Medprocurementstatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Medprocurementstatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMedprocurementstatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Medprocurementstatus), nil
}

func (e Medprocurementstatus) Valid() bool {
	switch e {
	case MedprocurementstatusPURCHASED,
		MedprocurementstatusORDERED,
		MedprocurementstatusNOTINDEMAND,
		MedprocurementstatusNOTINMARKET:
		return true
	}
	return false
}

type Platform string

const (
	PlatformANDROID Platform = "ANDROID"
	PlatformIOS     Platform = "IOS"
	PlatformWEB     Platform = "WEB"
	PlatformSERVICE Platform = "SERVICE"
	PlatformUNKNOWN Platform = "UNKNOWN"
)

func (e *Platform) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Platform(s)
	case string:
		*e = Platform(s)
	default:
		return fmt.Errorf("unsupported scan type for Platform: %T", src)
	}
	return nil
}

type NullPlatform struct {
	Platform Platform `json:"platform"`
	Valid    bool     `json:"valid"` // Valid is true if Platform is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPlatform) Scan(value interface{}) error {
	if value == nil {
		ns.Platform, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Platform.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPlatform) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Platform), nil
}

func (e Platform) Valid() bool {
	switch e {
	case PlatformANDROID,
		PlatformIOS,
		PlatformWEB,
		PlatformSERVICE,
		PlatformUNKNOWN:
		return true
	}
	return false
}

type Prescriptionstatus string

const (
	PrescriptionstatusAPPROVED Prescriptionstatus = "APPROVED"
	PrescriptionstatusREJECTED Prescriptionstatus = "REJECTED"
	PrescriptionstatusPENDING  Prescriptionstatus = "PENDING"
	PrescriptionstatusDELETED  Prescriptionstatus = "DELETED"
)

func (e *Prescriptionstatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Prescriptionstatus(s)
	case string:
		*e = Prescriptionstatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Prescriptionstatus: %T", src)
	}
	return nil
}

type NullPrescriptionstatus struct {
	Prescriptionstatus Prescriptionstatus `json:"prescriptionstatus"`
	Valid              bool               `json:"valid"` // Valid is true if Prescriptionstatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPrescriptionstatus) Scan(value interface{}) error {
	if value == nil {
		ns.Prescriptionstatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Prescriptionstatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPrescriptionstatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Prescriptionstatus), nil
}

func (e Prescriptionstatus) Valid() bool {
	switch e {
	case PrescriptionstatusAPPROVED,
		PrescriptionstatusREJECTED,
		PrescriptionstatusPENDING,
		PrescriptionstatusDELETED:
		return true
	}
	return false
}

type RiderStatus string

const (
	RiderStatusOnline  RiderStatus = "online"
	RiderStatusOffline RiderStatus = "offline"
)

func (e *RiderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RiderStatus(s)
	case string:
		*e = RiderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for RiderStatus: %T", src)
	}
	return nil
}

type NullRiderStatus struct {
	RiderStatus RiderStatus `json:"rider_status"`
	Valid       bool        `json:"valid"` // Valid is true if RiderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRiderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.RiderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RiderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRiderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RiderStatus), nil
}

func (e RiderStatus) Valid() bool {
	switch e {
	case RiderStatusOnline,
		RiderStatusOffline:
		return true
	}
	return false
}

type Role string

const (
	RoleDRIVER  Role = "DRIVER"
	RoleCASHIER Role = "CASHIER"
	RoleSUPPORT Role = "SUPPORT"
)

func (e *Role) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Role(s)
	case string:
		*e = Role(s)
	default:
		return fmt.Errorf("unsupported scan type for Role: %T", src)
	}
	return nil
}

type NullRole struct {
	Role  Role `json:"role"`
	Valid bool `json:"valid"` // Valid is true if Role is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRole) Scan(value interface{}) error {
	if value == nil {
		ns.Role, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Role.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Role), nil
}

func (e Role) Valid() bool {
	switch e {
	case RoleDRIVER,
		RoleCASHIER,
		RoleSUPPORT:
		return true
	}
	return false
}

type Salechannel string

const (
	SalechannelONLINE     Salechannel = "ONLINE"
	SalechannelOFFLINE    Salechannel = "OFFLINE"
	SalechannelOMNI       Salechannel = "OMNI"
	SalechannelNOTFORSALE Salechannel = "NOT_FOR_SALE"
)

func (e *Salechannel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Salechannel(s)
	case string:
		*e = Salechannel(s)
	default:
		return fmt.Errorf("unsupported scan type for Salechannel: %T", src)
	}
	return nil
}

type NullSalechannel struct {
	Salechannel Salechannel `json:"salechannel"`
	Valid       bool        `json:"valid"` // Valid is true if Salechannel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSalechannel) Scan(value interface{}) error {
	if value == nil {
		ns.Salechannel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Salechannel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSalechannel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Salechannel), nil
}

func (e Salechannel) Valid() bool {
	switch e {
	case SalechannelONLINE,
		SalechannelOFFLINE,
		SalechannelOMNI,
		SalechannelNOTFORSALE:
		return true
	}
	return false
}

type TripCheckpointType string

const (
	TripCheckpointTypePickup       TripCheckpointType = "pickup"
	TripCheckpointTypeDropoff      TripCheckpointType = "dropoff"
	TripCheckpointTypeRerouted     TripCheckpointType = "rerouted"
	TripCheckpointTypeIntermediate TripCheckpointType = "intermediate"
	TripCheckpointTypeDropped      TripCheckpointType = "dropped"
)

func (e *TripCheckpointType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TripCheckpointType(s)
	case string:
		*e = TripCheckpointType(s)
	default:
		return fmt.Errorf("unsupported scan type for TripCheckpointType: %T", src)
	}
	return nil
}

type NullTripCheckpointType struct {
	TripCheckpointType TripCheckpointType `json:"trip_checkpoint_type"`
	Valid              bool               `json:"valid"` // Valid is true if TripCheckpointType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTripCheckpointType) Scan(value interface{}) error {
	if value == nil {
		ns.TripCheckpointType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TripCheckpointType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTripCheckpointType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TripCheckpointType), nil
}

func (e TripCheckpointType) Valid() bool {
	switch e {
	case TripCheckpointTypePickup,
		TripCheckpointTypeDropoff,
		TripCheckpointTypeRerouted,
		TripCheckpointTypeIntermediate,
		TripCheckpointTypeDropped:
		return true
	}
	return false
}

type TripStatus string

const (
	TripStatusNew              TripStatus = "new"
	TripStatusRiderAssigned    TripStatus = "rider_assigned"
	TripStatusEnrouteToPickup  TripStatus = "enroute_to_pickup"
	TripStatusArrivedAtDropoff TripStatus = "arrived_at_dropoff"
	TripStatusEnrouteToDropoff TripStatus = "enroute_to_dropoff"
	TripStatusNearbyDropoff    TripStatus = "nearby_dropoff"
	TripStatusCompleted        TripStatus = "completed"
	TripStatusCancelled        TripStatus = "cancelled"
)

func (e *TripStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TripStatus(s)
	case string:
		*e = TripStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TripStatus: %T", src)
	}
	return nil
}

type NullTripStatus struct {
	TripStatus TripStatus `json:"trip_status"`
	Valid      bool       `json:"valid"` // Valid is true if TripStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTripStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TripStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TripStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTripStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TripStatus), nil
}

func (e TripStatus) Valid() bool {
	switch e {
	case TripStatusNew,
		TripStatusRiderAssigned,
		TripStatusEnrouteToPickup,
		TripStatusArrivedAtDropoff,
		TripStatusEnrouteToDropoff,
		TripStatusNearbyDropoff,
		TripStatusCompleted,
		TripStatusCancelled:
		return true
	}
	return false
}

type TripType string

const (
	TripTypeShared  TripType = "shared"
	TripTypeForward TripType = "forward"
	TripTypeReturn  TripType = "return"
)

func (e *TripType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TripType(s)
	case string:
		*e = TripType(s)
	default:
		return fmt.Errorf("unsupported scan type for TripType: %T", src)
	}
	return nil
}

type NullTripType struct {
	TripType TripType `json:"trip_type"`
	Valid    bool     `json:"valid"` // Valid is true if TripType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTripType) Scan(value interface{}) error {
	if value == nil {
		ns.TripType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TripType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTripType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TripType), nil
}

func (e TripType) Valid() bool {
	switch e {
	case TripTypeShared,
		TripTypeForward,
		TripTypeReturn:
		return true
	}
	return false
}

type VehicleType string

const (
	VehicleTypeBike  VehicleType = "bike"
	VehicleTypeTruck VehicleType = "truck"
	VehicleTypeCar   VehicleType = "car"
)

func (e *VehicleType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VehicleType(s)
	case string:
		*e = VehicleType(s)
	default:
		return fmt.Errorf("unsupported scan type for VehicleType: %T", src)
	}
	return nil
}

type NullVehicleType struct {
	VehicleType VehicleType `json:"vehicle_type"`
	Valid       bool        `json:"valid"` // Valid is true if VehicleType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVehicleType) Scan(value interface{}) error {
	if value == nil {
		ns.VehicleType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VehicleType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVehicleType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VehicleType), nil
}

func (e VehicleType) Valid() bool {
	switch e {
	case VehicleTypeBike,
		VehicleTypeTruck,
		VehicleTypeCar:
		return true
	}
	return false
}

type AppUpdate struct {
	ID                 int32              `db:"id" json:"id"`
	Product            *string            `db:"product" json:"product"`
	Platform           Platform           `db:"platform" json:"platform"`
	CurrentBuild       *int32             `db:"current_build" json:"current_build"`
	DeprecatedBuild    *int32             `db:"deprecated_build" json:"deprecated_build"`
	DiscountinuedBuild *int32             `db:"discountinued_build" json:"discountinued_build"`
	CreatedAt          pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	Marketplace        NullMarketplace    `db:"marketplace" json:"marketplace"`
}

type Cart struct {
	CartID             uuid.UUID          `db:"cart_id" json:"cart_id"`
	OrderID            string             `db:"order_id" json:"order_id"`
	UniquerFloor       *string            `db:"uniquer_floor" json:"uniquer_floor"`
	UniquerRound       *string            `db:"uniquer_round" json:"uniquer_round"`
	AddressID          *int32             `db:"address_id" json:"address_id"`
	CartStatus         string             `db:"cart_status" json:"cart_status"`
	VerificationStatus string             `db:"verification_status" json:"verification_status"`
	AgentID            *string            `db:"agent_id" json:"agent_id"`
	CreatedAt          pgtype.Timestamptz `db:"created_at" json:"created_at"`
	BilledAt           *int64             `db:"billed_at" json:"billed_at"`
}

type CartItem struct {
	ID          uuid.UUID  `db:"id" json:"id"`
	CartID      uuid.UUID  `db:"cart_id" json:"cart_id"`
	ItemType    string     `db:"item_type" json:"item_type"`
	ItemName    string     `db:"item_name" json:"item_name"`
	Discount    int32      `db:"discount" json:"discount"`
	Version     int32      `db:"version" json:"version"`
	Quantity    int32      `db:"quantity" json:"quantity"`
	InventoryID *uuid.UUID `db:"inventory_id" json:"inventory_id"`
	Amount      int32      `db:"amount" json:"amount"`
	Cgst        int32      `db:"cgst" json:"cgst"`
	Igst        int32      `db:"igst" json:"igst"`
	Sgst        int32      `db:"sgst" json:"sgst"`
}

type LogisticEvent struct {
	ID                     uuid.UUID          `db:"id" json:"id"`
	RiderID                *string            `db:"rider_id" json:"rider_id"`
	EventType              LogisticEventType  `db:"event_type" json:"event_type"`
	EventBatteryPercentage int32              `db:"event_battery_percentage" json:"event_battery_percentage"`
	EventGeohash           string             `db:"event_geohash" json:"event_geohash"`
	EventPayload           []byte             `db:"event_payload" json:"event_payload"`
	CreatedAt              pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt              pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type LogisticTrip struct {
	TripID         uuid.UUID          `db:"trip_id" json:"trip_id"`
	OrderID        string             `db:"order_id" json:"order_id"`
	Status         string             `db:"status" json:"status"`
	Partner        string             `db:"partner" json:"partner"`
	PartnerPayload []byte             `db:"partner_payload" json:"partner_payload"`
	EnroutePayload []byte             `db:"enroute_payload" json:"enroute_payload"`
	CreatedAt      pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	VehicleID      *string            `db:"vehicle_id" json:"vehicle_id"`
	CashCollected  int32              `db:"cash_collected" json:"cash_collected"`
}

type MedBatch struct {
	ID         uuid.UUID `db:"id" json:"id"`
	MedicineID uuid.UUID `db:"medicine_id" json:"medicine_id"`
	Batch      string    `db:"batch" json:"batch"`
	Expiry     string    `db:"expiry" json:"expiry"`
	ExpiryDate string    `db:"expiry_date" json:"expiry_date"`
	GstSlab    int32     `db:"gst_slab" json:"gst_slab"`
	PtrPack    int32     `db:"ptr_pack" json:"ptr_pack"`
	MrpPack    int32     `db:"mrp_pack" json:"mrp_pack"`
}

type MedDetail struct {
	ID                 uuid.UUID   `db:"id" json:"id"`
	Name               string      `db:"name" json:"name"`
	Salt               *string     `db:"salt" json:"salt"`
	Manufacturer       string      `db:"manufacturer" json:"manufacturer"`
	SizeString         string      `db:"size_string" json:"size_string"`
	Size               int32       `db:"size" json:"size"`
	DefaultDiscount    int32       `db:"default_discount" json:"default_discount"`
	PrescriptionNeeded bool        `db:"prescription_needed" json:"prescription_needed"`
	Hsn                string      `db:"hsn" json:"hsn"`
	MaxOrderableQty    int32       `db:"max_orderable_qty" json:"max_orderable_qty"`
	MedicineType       string      `db:"medicine_type" json:"medicine_type"`
	Description        string      `db:"description" json:"description"`
	IsDiscontinued     bool        `db:"is_discontinued" json:"is_discontinued"`
	MrpPack            int32       `db:"mrp_pack" json:"mrp_pack"`
	SlugSerial         int32       `db:"slug_serial" json:"slug_serial"`
	DiscountTier       interface{} `db:"discount_tier" json:"discount_tier"`
	SaleChannel        interface{} `db:"sale_channel" json:"sale_channel"`
	IsOld              bool        `db:"is_old" json:"is_old"`
	ExternalSlug       *string     `db:"external_slug" json:"external_slug"`
}

type MedOrderAttribute struct {
	ID                       int32              `db:"id" json:"id"`
	OrderID                  string             `db:"order_id" json:"order_id"`
	UserID                   string             `db:"user_id" json:"user_id"`
	AppInfo                  []byte             `db:"app_info" json:"app_info"`
	Balance                  int32              `db:"balance" json:"balance"`
	IsPaid                   bool               `db:"is_paid" json:"is_paid"`
	BillStatus               *string            `db:"bill_status" json:"bill_status"`
	CeChannelID              *int32             `db:"ce_channel_id" json:"ce_channel_id"`
	PaymentMode              *string            `db:"payment_mode" json:"payment_mode"`
	PaymentDetails           []byte             `db:"payment_details" json:"payment_details"`
	CustomerAddress          *string            `db:"customer_address" json:"customer_address"`
	CustomerLocation         []byte             `db:"customer_location" json:"customer_location"`
	DiscountPercentage       *int32             `db:"discount_percentage" json:"discount_percentage"`
	PharmacyDeliveryEta      *int32             `db:"pharmacy_delivery_eta" json:"pharmacy_delivery_eta"`
	CustomerPharmacyDistance *int32             `db:"customer_pharmacy_distance" json:"customer_pharmacy_distance"`
	IsAgentOrder             bool               `db:"is_agent_order" json:"is_agent_order"`
	PgPlinkID                *string            `db:"pg_plink_id" json:"pg_plink_id"`
	LogisticDetails          []byte             `db:"logistic_details" json:"logistic_details"`
	BusinessID               *string            `db:"business_id" json:"business_id"`
	DiscountAmount           *int32             `db:"discount_amount" json:"discount_amount"`
	CreatedAt                pgtype.Timestamptz `db:"created_at" json:"created_at"`
	ServingPharmacyID        *uuid.UUID         `db:"serving_pharmacy_id" json:"serving_pharmacy_id"`
	BillingName              *string            `db:"billing_name" json:"billing_name"`
	PrescriptionNote         string             `db:"prescription_note" json:"prescription_note"`
	TotalAmountPaisa         *int32             `db:"total_amount_paisa" json:"total_amount_paisa"`
}

type MedStock struct {
	ID         int32              `db:"id" json:"id"`
	PharmacyID uuid.UUID          `db:"pharmacy_id" json:"pharmacy_id"`
	MedicineID uuid.UUID          `db:"medicine_id" json:"medicine_id"`
	Batch      string             `db:"batch" json:"batch"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"created_at"`
	Stock      int32              `db:"stock" json:"stock"`
}

type MedsPharmacy struct {
	ID                     uuid.UUID      `db:"id" json:"id"`
	Name                   string         `db:"name" json:"name"`
	Latitude               pgtype.Numeric `db:"latitude" json:"latitude"`
	Longitude              pgtype.Numeric `db:"longitude" json:"longitude"`
	Address                string         `db:"address" json:"address"`
	Phone                  *string        `db:"phone" json:"phone"`
	IsActive               bool           `db:"is_active" json:"is_active"`
	PrinterID              uuid.UUID      `db:"printer_id" json:"printer_id"`
	DlNumber               *string        `db:"dl_number" json:"dl_number"`
	FssaiNumber            *string        `db:"fssai_number" json:"fssai_number"`
	GstNumber              *string        `db:"gst_number" json:"gst_number"`
	PanNumber              *string        `db:"pan_number" json:"pan_number"`
	ShippingPartner        string         `db:"shipping_partner" json:"shipping_partner"`
	PrefOtpEnabledDelivery bool           `db:"pref_otp_enabled_delivery" json:"pref_otp_enabled_delivery"`
	DummyCartID            *string        `db:"dummy_cart_id" json:"dummy_cart_id"`
}

type MedsSavedAddress struct {
	ID            int32              `db:"id" json:"id"`
	Label         *string            `db:"label" json:"label"`
	UserID        string             `db:"user_id" json:"user_id"`
	AddressLine1  string             `db:"address_line_1" json:"address_line_1"`
	City          string             `db:"city" json:"city"`
	PinCode       string             `db:"pin_code" json:"pin_code"`
	AddressStreet string             `db:"address_street" json:"address_street"`
	CreatedAt     pgtype.Timestamptz `db:"created_at" json:"created_at"`
	Latitude      float64            `db:"latitude" json:"latitude"`
	Longitude     float64            `db:"longitude" json:"longitude"`
}

type Rider struct {
	UserID      string             `db:"user_id" json:"user_id"`
	Status      RiderStatus        `db:"status" json:"status"`
	Geohash     string             `db:"geohash" json:"geohash"`
	Battery     int32              `db:"battery" json:"battery"`
	VehicleType VehicleType        `db:"vehicle_type" json:"vehicle_type"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Trip struct {
	TripID          uuid.UUID          `db:"trip_id" json:"trip_id"`
	ExternalTripID  *string            `db:"external_trip_id" json:"external_trip_id"`
	EncodedPolyline *string            `db:"encoded_polyline" json:"encoded_polyline"`
	RiderID         *string            `db:"rider_id" json:"rider_id"`
	TripType        TripType           `db:"trip_type" json:"trip_type"`
	DropoffGeohash  string             `db:"dropoff_geohash" json:"dropoff_geohash"`
	PickupGeohash   string             `db:"pickup_geohash" json:"pickup_geohash"`
	Status          TripStatus         `db:"status" json:"status"`
	CreatedAt       pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type TripCheckpoint struct {
	ID                      uuid.UUID          `db:"id" json:"id"`
	TripID                  uuid.UUID          `db:"trip_id" json:"trip_id"`
	CheckpointOrder         int32              `db:"checkpoint_order" json:"checkpoint_order"`
	CheckpointType          TripCheckpointType `db:"checkpoint_type" json:"checkpoint_type"`
	ArrivedEvent            *uuid.UUID         `db:"arrived_event" json:"arrived_event"`
	VisitedEvent            *uuid.UUID         `db:"visited_event" json:"visited_event"`
	CheckpointGeohash       string             `db:"checkpoint_geohash" json:"checkpoint_geohash"`
	AggregatedTripDistance  int32              `db:"aggregated_trip_distance" json:"aggregated_trip_distance"`
	AggregatedEstimatedTime int32              `db:"aggregated_estimated_time" json:"aggregated_estimated_time"`
	CreatedAt               pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt               pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}
