// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: logistic_trips.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const getTripByOrderId = `-- name: GetTripByOrderId :one
SELECT trip_id, order_id, status, partner, partner_payload, enroute_payload, created_at, updated_at, vehicle_id, cash_collected from logistic_trips WHERE order_id = $1
`

func (q *Queries) GetTripByOrderId(ctx context.Context, orderID string) (LogisticTrip, error) {
	row := q.db.QueryRow(ctx, getTripByOrderId, orderID)
	var i LogisticTrip
	err := row.Scan(
		&i.TripID,
		&i.OrderID,
		&i.Status,
		&i.Partner,
		&i.PartnerPayload,
		&i.EnroutePayload,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VehicleID,
		&i.CashCollected,
	)
	return i, err
}

const getTripByTripId = `-- name: GetTripByTripId :one
SELECT trip_id, order_id, status, partner, partner_payload, enroute_payload, created_at, updated_at, vehicle_id, cash_collected from logistic_trips WHERE trip_id = $1
`

func (q *Queries) GetTripByTripId(ctx context.Context, tripID uuid.UUID) (LogisticTrip, error) {
	row := q.db.QueryRow(ctx, getTripByTripId, tripID)
	var i LogisticTrip
	err := row.Scan(
		&i.TripID,
		&i.OrderID,
		&i.Status,
		&i.Partner,
		&i.PartnerPayload,
		&i.EnroutePayload,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VehicleID,
		&i.CashCollected,
	)
	return i, err
}

const getTripsByPartner = `-- name: GetTripsByPartner :many
SELECT trip_id, order_id, status, partner, partner_payload, enroute_payload, created_at, updated_at, vehicle_id, cash_collected from logistic_trips WHERE partner = $1
`

func (q *Queries) GetTripsByPartner(ctx context.Context, partner string) ([]LogisticTrip, error) {
	rows, err := q.db.Query(ctx, getTripsByPartner, partner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LogisticTrip{}
	for rows.Next() {
		var i LogisticTrip
		if err := rows.Scan(
			&i.TripID,
			&i.OrderID,
			&i.Status,
			&i.Partner,
			&i.PartnerPayload,
			&i.EnroutePayload,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.VehicleID,
			&i.CashCollected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTripsByStatus = `-- name: ListTripsByStatus :many
SELECT trip_id, order_id, status, partner, partner_payload, enroute_payload, created_at, updated_at, vehicle_id, cash_collected FROM logistic_trips WHERE status = $1
`

func (q *Queries) ListTripsByStatus(ctx context.Context, status string) ([]LogisticTrip, error) {
	rows, err := q.db.Query(ctx, listTripsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LogisticTrip{}
	for rows.Next() {
		var i LogisticTrip
		if err := rows.Scan(
			&i.TripID,
			&i.OrderID,
			&i.Status,
			&i.Partner,
			&i.PartnerPayload,
			&i.EnroutePayload,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.VehicleID,
			&i.CashCollected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
