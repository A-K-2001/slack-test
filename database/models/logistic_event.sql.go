// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: logistic_event.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const getLogisticEventsById = `-- name: GetLogisticEventsById :one
SELECT id, rider_id, event_type, event_battery_percentage, event_geohash, event_payload, created_at, updated_at FROM logistic_events WHERE id = $1
`

func (q *Queries) GetLogisticEventsById(ctx context.Context, id uuid.UUID) (LogisticEvent, error) {
	row := q.db.QueryRow(ctx, getLogisticEventsById, id)
	var i LogisticEvent
	err := row.Scan(
		&i.ID,
		&i.RiderID,
		&i.EventType,
		&i.EventBatteryPercentage,
		&i.EventGeohash,
		&i.EventPayload,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLogisticEventsByRiderId = `-- name: GetLogisticEventsByRiderId :many
SELECT id, rider_id, event_type, event_battery_percentage, event_geohash, event_payload, created_at, updated_at FROM logistic_events WHERE rider_id = $1
`

func (q *Queries) GetLogisticEventsByRiderId(ctx context.Context, riderID *string) ([]LogisticEvent, error) {
	rows, err := q.db.Query(ctx, getLogisticEventsByRiderId, riderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LogisticEvent{}
	for rows.Next() {
		var i LogisticEvent
		if err := rows.Scan(
			&i.ID,
			&i.RiderID,
			&i.EventType,
			&i.EventBatteryPercentage,
			&i.EventGeohash,
			&i.EventPayload,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertLogisticEvent = `-- name: InsertLogisticEvent :one
INSERT INTO
    logistic_events (
        rider_id,
        event_type,
        event_battery_percentage,
        event_geohash
    )
VALUES
    ($1, $2, $3, $4) RETURNING id, rider_id, event_type, event_battery_percentage, event_geohash, event_payload, created_at, updated_at
`

type InsertLogisticEventParams struct {
	RiderID                *string           `db:"rider_id" json:"rider_id"`
	EventType              LogisticEventType `db:"event_type" json:"event_type"`
	EventBatteryPercentage int32             `db:"event_battery_percentage" json:"event_battery_percentage"`
	EventGeohash           string            `db:"event_geohash" json:"event_geohash"`
}

func (q *Queries) InsertLogisticEvent(ctx context.Context, arg InsertLogisticEventParams) (LogisticEvent, error) {
	row := q.db.QueryRow(ctx, insertLogisticEvent,
		arg.RiderID,
		arg.EventType,
		arg.EventBatteryPercentage,
		arg.EventGeohash,
	)
	var i LogisticEvent
	err := row.Scan(
		&i.ID,
		&i.RiderID,
		&i.EventType,
		&i.EventBatteryPercentage,
		&i.EventGeohash,
		&i.EventPayload,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
