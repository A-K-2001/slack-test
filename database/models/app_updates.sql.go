// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: app_updates.sql

package models

import (
	"context"
)

const getAppUpdates = `-- name: GetAppUpdates :many
SELECT id, product, platform, current_build, deprecated_build, discountinued_build, created_at, updated_at, marketplace from app_updates
`

func (q *Queries) GetAppUpdates(ctx context.Context) ([]AppUpdate, error) {
	rows, err := q.db.Query(ctx, getAppUpdates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AppUpdate{}
	for rows.Next() {
		var i AppUpdate
		if err := rows.Scan(
			&i.ID,
			&i.Product,
			&i.Platform,
			&i.CurrentBuild,
			&i.DeprecatedBuild,
			&i.DiscountinuedBuild,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Marketplace,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAppUpdatesByPlatform = `-- name: GetAppUpdatesByPlatform :one
SELECT id, product, platform, current_build, deprecated_build, discountinued_build, created_at, updated_at, marketplace from app_updates WHERE platform = $1
`

func (q *Queries) GetAppUpdatesByPlatform(ctx context.Context, platform Platform) (AppUpdate, error) {
	row := q.db.QueryRow(ctx, getAppUpdatesByPlatform, platform)
	var i AppUpdate
	err := row.Scan(
		&i.ID,
		&i.Product,
		&i.Platform,
		&i.CurrentBuild,
		&i.DeprecatedBuild,
		&i.DiscountinuedBuild,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Marketplace,
	)
	return i, err
}
