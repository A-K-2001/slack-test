// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: med_batch.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const getBatchByMedicineAndBatch = `-- name: GetBatchByMedicineAndBatch :one
SELECT id, medicine_id, batch, expiry, expiry_date, gst_slab, ptr_pack, mrp_pack FROM med_batch WHERE medicine_id = $1 AND batch = $2
`

type GetBatchByMedicineAndBatchParams struct {
	MedicineID uuid.UUID `db:"medicine_id" json:"medicine_id"`
	Batch      string    `db:"batch" json:"batch"`
}

func (q *Queries) GetBatchByMedicineAndBatch(ctx context.Context, arg GetBatchByMedicineAndBatchParams) (MedBatch, error) {
	row := q.db.QueryRow(ctx, getBatchByMedicineAndBatch, arg.MedicineID, arg.Batch)
	var i MedBatch
	err := row.Scan(
		&i.ID,
		&i.MedicineID,
		&i.Batch,
		&i.Expiry,
		&i.ExpiryDate,
		&i.GstSlab,
		&i.PtrPack,
		&i.MrpPack,
	)
	return i, err
}

const listBatchesByMedicineID = `-- name: ListBatchesByMedicineID :many
SELECT id, medicine_id, batch, expiry, expiry_date, gst_slab, ptr_pack, mrp_pack FROM med_batch WHERE medicine_id = $1
`

func (q *Queries) ListBatchesByMedicineID(ctx context.Context, medicineID uuid.UUID) ([]MedBatch, error) {
	rows, err := q.db.Query(ctx, listBatchesByMedicineID, medicineID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MedBatch{}
	for rows.Next() {
		var i MedBatch
		if err := rows.Scan(
			&i.ID,
			&i.MedicineID,
			&i.Batch,
			&i.Expiry,
			&i.ExpiryDate,
			&i.GstSlab,
			&i.PtrPack,
			&i.MrpPack,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listExpiredBatches = `-- name: ListExpiredBatches :many
SELECT id, medicine_id, batch, expiry, expiry_date, gst_slab, ptr_pack, mrp_pack FROM med_batch WHERE expiry_date < CURRENT_DATE
`

func (q *Queries) ListExpiredBatches(ctx context.Context) ([]MedBatch, error) {
	rows, err := q.db.Query(ctx, listExpiredBatches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MedBatch{}
	for rows.Next() {
		var i MedBatch
		if err := rows.Scan(
			&i.ID,
			&i.MedicineID,
			&i.Batch,
			&i.Expiry,
			&i.ExpiryDate,
			&i.GstSlab,
			&i.PtrPack,
			&i.MrpPack,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
